-- Jakub Kuszneruk jk320790

{-# OPTIONS -fno-warn-incomplete-patterns #-}
module Printshl where

-- pretty-printer generated by the BNF converter

import Absshl
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: [a] -> Doc
  prtList = concatD . map (prt 0)

instance Print a => Print [a] where
  prt _ = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))



instance Print Prog where
  prt i e = case e of
   Program blk -> prPrec i 0 (concatD [doc (showString "SOLUTION") , prt 0 blk , doc (showString "CYA")])


instance Print Blk where
  prt i e = case e of
   Block decs stms -> prPrec i 0 (concatD [prt 0 decs , prt 0 stms])


instance Print Stm where
  prt i e = case e of
   ForLoop id exp blk -> prPrec i 0 (concatD [doc (showString "FOR") , prt 0 id , doc (showString "IN") , prt 0 exp , doc (showString "DO") , prt 0 blk , doc (showString "DONE")])
   IfStmt exp blk -> prPrec i 0 (concatD [doc (showString "IF") , prt 0 exp , doc (showString "THEN") , prt 0 blk , doc (showString "FI")])
   IfElseStmt exp blk0 blk -> prPrec i 0 (concatD [doc (showString "IF") , prt 0 exp , doc (showString "THEN") , prt 0 blk0 , doc (showString "ELSE") , prt 0 blk , doc (showString "FI")])
   ReturnStmt exp -> prPrec i 0 (concatD [doc (showString "RETURN") , prt 0 exp , doc (showString ";")])
   PrintStmt exp -> prPrec i 0 (concatD [doc (showString "PRINT") , prt 0 exp , doc (showString ";")])
   ExpStmt exp -> prPrec i 0 (concatD [prt 0 exp , doc (showString ";")])
   Assign id exp -> prPrec i 0 (concatD [prt 0 id , doc (showString "=") , prt 0 exp , doc (showString ";")])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print Dec where
  prt i e = case e of
   Declaration typ id -> prPrec i 0 (concatD [prt 0 typ , prt 0 id , doc (showString ";")])
   DeclarationAssing typ id exp -> prPrec i 0 (concatD [prt 0 typ , prt 0 id , doc (showString "=") , prt 0 exp , doc (showString ";")])
   DeclarationFunc typ id fargs blk -> prPrec i 0 (concatD [prt 0 typ , prt 0 id , doc (showString "(") , prt 0 fargs , doc (showString ")") , doc (showString "DO") , prt 0 blk , doc (showString "RETURNED")])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print FArg where
  prt i e = case e of
   FArgument typ id -> prPrec i 0 (concatD [prt 0 typ , prt 0 id])
   FArggumentRef typ id -> prPrec i 0 (concatD [doc (showString "REF") , prt 0 typ , prt 0 id])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print Typ where
  prt i e = case e of
   TInt  -> prPrec i 0 (concatD [doc (showString "Integer")])
   TBool  -> prPrec i 0 (concatD [doc (showString "Boolean")])
   TString  -> prPrec i 0 (concatD [doc (showString "String")])


instance Print Exp where
  prt i e = case e of
   Eeq exp0 exp -> prPrec i 0 (concatD [prt 0 exp0 , doc (showString "==") , prt 2 exp])
   Eneq exp0 exp -> prPrec i 0 (concatD [prt 0 exp0 , doc (showString "!=") , prt 2 exp])
   Elthen exp0 exp -> prPrec i 2 (concatD [prt 2 exp0 , doc (showString "<") , prt 3 exp])
   Egrthen exp0 exp -> prPrec i 2 (concatD [prt 2 exp0 , doc (showString ">") , prt 3 exp])
   Ele exp0 exp -> prPrec i 2 (concatD [prt 2 exp0 , doc (showString "<=") , prt 3 exp])
   Ege exp0 exp -> prPrec i 2 (concatD [prt 2 exp0 , doc (showString ">=") , prt 3 exp])
   Eplus exp0 exp -> prPrec i 3 (concatD [prt 3 exp0 , doc (showString "+") , prt 4 exp])
   Eminus exp0 exp -> prPrec i 3 (concatD [prt 3 exp0 , doc (showString "-") , prt 4 exp])
   Etimes exp0 exp -> prPrec i 4 (concatD [prt 4 exp0 , doc (showString "*") , prt 5 exp])
   Ediv exp0 exp -> prPrec i 4 (concatD [prt 4 exp0 , doc (showString "/") , prt 5 exp])
   Einc id -> prPrec i 5 (concatD [prt 0 id , doc (showString "++")])
   Edec id -> prPrec i 5 (concatD [prt 0 id , doc (showString "--")])
   Einvok id iparams -> prPrec i 5 (concatD [prt 0 id , doc (showString "(") , prt 0 iparams , doc (showString ")")])
   Evar id -> prPrec i 5 (concatD [prt 0 id])
   Econst constraint -> prPrec i 5 (concatD [prt 0 constraint])


instance Print Constraint where
  prt i e = case e of
   Eint n -> prPrec i 0 (concatD [prt 0 n])
   Ebool boolt -> prPrec i 0 (concatD [prt 0 boolt])
   Estring str -> prPrec i 0 (concatD [prt 0 str])


instance Print BoolT where
  prt i e = case e of
   Constraint_True  -> prPrec i 0 (concatD [doc (showString "True")])
   Constraint_False  -> prPrec i 0 (concatD [doc (showString "False")])


instance Print IParam where
  prt i e = case e of
   InvokeParamater exp -> prPrec i 0 (concatD [prt 0 exp])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])


