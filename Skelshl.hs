module Skelshl where

-- Haskell module generated by the BNF converter

import Absshl
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transProg :: Prog -> Result
transProg x = case x of
  Program blk  -> failure x


transBlk :: Blk -> Result
transBlk x = case x of
  Block decs stms  -> failure x


transStm :: Stm -> Result
transStm x = case x of
  ForLoop id exp blk  -> failure x
  IfStmt exp blk  -> failure x
  IfElseStmt exp blk0 blk  -> failure x
  ReturnStmt exp  -> failure x
  PrintStmt exp  -> failure x
  ExpStmt exp  -> failure x
  Assign id exp  -> failure x


transDec :: Dec -> Result
transDec x = case x of
  Declaration typ id  -> failure x
  DeclarationAssing typ id exp  -> failure x
  DeclarationFunc typ id fargs blk  -> failure x


transFArg :: FArg -> Result
transFArg x = case x of
  FArgument typ id  -> failure x
  FArgumentAssing typ id exp  -> failure x
  FArgumentFunc typ id fargs  -> failure x
  FArgumentRef typ id  -> failure x


transTyp :: Typ -> Result
transTyp x = case x of
  TInt  -> failure x
  TBool  -> failure x
  TString  -> failure x


transExp :: Exp -> Result
transExp x = case x of
  Eeq exp0 exp  -> failure x
  Eneq exp0 exp  -> failure x
  Elthen exp0 exp  -> failure x
  Egrthen exp0 exp  -> failure x
  Ele exp0 exp  -> failure x
  Ege exp0 exp  -> failure x
  Eplus exp0 exp  -> failure x
  Eminus exp0 exp  -> failure x
  Etimes exp0 exp  -> failure x
  Ediv exp0 exp  -> failure x
  Einc id  -> failure x
  Edec id  -> failure x
  Einvok id iparams  -> failure x
  Evar id  -> failure x
  Econst constraint  -> failure x


transConstraint :: Constraint -> Result
transConstraint x = case x of
  Eint n  -> failure x
  Ebool boolt  -> failure x
  Estring str  -> failure x


transBoolT :: BoolT -> Result
transBoolT x = case x of
  Constraint_True  -> failure x
  Constraint_False  -> failure x


transIParam :: IParam -> Result
transIParam x = case x of
  InvokeParamater exp  -> failure x



